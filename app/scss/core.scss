* {
	padding: 0;
	margin: 0;
	border: 0;
}

*,
*:before,
*:after {
	-moz-box-sizing: border-box;
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
}

nav,
footer,
header,
aside {
	display: block;
}

html {
	scroll-behavior: smooth;
}

html,
body {
	height: 100%;
	width: 100%;
	line-height: 1.6;
	-ms-text-size-adjust: 100%;
	-moz-text-size-adjust: 100%;
	-webkit-text-size-adjust: 100%;
	scrollbar-gutter: stable;
}

input,
button,
textarea {
	font-family: inherit;
}

input::-ms-clear {
	display: none;
}

button {
	cursor: pointer;
}

button::-moz-focus-inner {
	padding: 0;
	border: 0;
}

a,
a:visited {
	text-decoration: none;
}

a:hover {
	text-decoration: none;
}

ul li {
	list-style: none;
}

img {
	display: block;
	max-width: 100%;
}

svg {
	vertical-align: top;
}

h1,
h2,
h3,
h4,
h5,
h6 {
	font-size: inherit;
	font-weight: 400;
}

// В font-size можно записать самый частый размер шрифта на сайте, в font-family - самый частое семейство шрифта.

body {
	font-family: "Lato", "Arial", sans-serif;
	font-size: rem(16);
	font-weight: 400;
	color: var(--gray-4);
	// color: $mainColor;
	// overflow-wrap: break-word;
	// word-wrap: break-word;
}

body._lock {
	overflow: hidden;
}

/*--------- visually-hidden ---------*/

// Класс, который можно использовать для элементов, которые  нужно скрыть, но так, чтобы скринридеры их видели. Например, заголовок, который должен по логике быть, но по дизайн-макету его нет. По скрытым таким способам ссылкам и кнопкам будет при табе происходить фокусировка, что будет не видно (осторожно).
// При display: none; ни поисковики, ни скринридеды не видят скрытый элемент. Атрибут hidden может заменить display: none;
// Если нужно сделать плавное появление и исчезновение выпадающего меню можно использовать visibility и opacity (hidden и 0). Но при этом нужно, чтобы элемент был спозиционирован абсолютно. Иначе он будет продолжать занимать место в разметке. Поисковики будут видеть элемент, скринридеры - нет.
//Вариант: opacity: 0; pointer-events: none; (и поисковики, и скринридеры видят элемент, элемент занимает место в разметке, как и в варианте выше). Делает то же самое.
// Исчезновение блока можно сделать с помощью спойлера (за счет height: 0;). В этом случае исчезновение/появление анимируется. И скрытый элемент будут видеть и поисковики, и скринридеры. Но в случае с height: auto; height не анимируется. Нужно, чтобы оба значения height были числами (решается с помощью js). Плюс нужно убирать паддинги и бордеры (при height: 0 они остаются видны).

.visually-hidden {
	position: absolute;
	width: 1px;
	height: 1px;
	margin: -1px;
	border: 0;
	padding: 0;
	white-space: nowrap;
	clip-path: inset(100%);
	clip: rect(0, 0, 0, 0);
	overflow: hidden;
}

/*------------------*/

.wrapper {
	overflow: hidden;
	display: flex;
	flex-direction: column;
	min-height: 100%;
}

[class$="__container"],
[class$="-container"] {
	max-width: $maxWidth;
	min-width: $minWidth;
	padding: 0 rem(15);
	margin: 0 auto;
}

.main {
	flex-grow: 1;
}

._blue {
	color: var(--blue-color);
}

.button {
	font-size: rem(16);
	// padding-left: rem(40);
	// padding-right: rem(40);
	padding: rem(12) rem(40);
	// min-height: rem(52);
	color: var(--white-color);
	background: var(--blue-color);
	border: 1px solid var(--blue-color);
	border-radius: rem(4);
	font-weight: 700;
	letter-spacing: rem(0.5);
	// line-height: 3.25;
	line-height: 1.65;
	// display: inline-flex;
	// display: block;
	display: flex;
	width: fit-content;
	// align-items: center;
	// justify-content: center;
	text-align: center;
	flex-shrink: 0;
	cursor: pointer;
	transition: all 0.3s ease 0s;
	@media (any-hover: hover) and (pointer: fine) {
		&:hover {
			color: var(--blue-color);
			border: 1px solid var(--blue-color);
			background: transparent;
		}
	}
	@media (max-width: $mobileSmall) {
		padding: rem(12) rem(20);
	}
	&_transparent {
		background: transparent;
		color: var(--blue-color);
		border: 1px solid var(--blue-color);
		@media (any-hover: hover) and (pointer: fine) {
			&:hover {
				color: var(--white-color);
				border: 1px solid var(--blue-color);
				background: var(--blue-color);
			}
		}
	}
	&_for-dark-bg {
		@media (any-hover: hover) and (pointer: fine) {
			&:hover {
				color: var(--white-color);
				border: 1px solid var(--white-color);
				background: transparent;
			}
		}
	}
	&_transparent_for-dark-bg {
		color: var(--white-color);
		border: 1px solid var(--white-color);
		background: transparent;
		@media (any-hover: hover) and (pointer: fine) {
			&:hover {
				color: var(--white-color);
				border: 1px solid var(--blue-color);
				background: var(--blue-color);
			}
		}
	}
	&_small {
		font-size: rem(14);
		padding-left: rem(32);
		padding-right: rem(32);
		line-height: 1.55;
	}
}

.heading2 {
	color: var(--black-color);
	// font-size: rem(46);
	font-size: proadrem(32, 46, $minWidthRemWithout, $maxWidthRemWithout);
	font-weight: 900;
	line-height: 1.3;
}

.heading3 {
	color: var(--black-color);
	font-size: rem(20);
	font-weight: 700;
	line-height: 1.5;
}
